name: VSTest Reusable Workflow

on:
  workflow_call:
    inputs:
      runsOn:
        required: true
        type: string
      dotnet-version:
        required: true
        type: string
      test-assembly:
        required: true
        type: string
      configuration:
        required: true
        type: string

jobs:
  run-tests:
    runs-on: ${{ inputs.runsOn }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

      - name: Debug Directory Structure
        shell: pwsh
        run: |
          # Debug: List all files in the working directory
          $workingDirectory = "${{ github.workspace }}"
          Set-Location -Path $workingDirectory
          Write-Host "Listing all files in the working directory:"
          Get-ChildItem -Path $workingDirectory -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Run tests with Visual Studio Test Runner
        shell: pwsh
        run: |
          # Ensure the correct working directory
          $workingDirectory = "${{ github.workspace }}"
          Set-Location -Path $workingDirectory

          # Resolve test assemblies from the bin directory
          $testAssemblies = Get-ChildItem -Path $workingDirectory -Recurse -File | Where-Object { $_.FullName -match "bin/.*/${{ inputs.configuration }}/.*Tests.dll" } | ForEach-Object { $_.FullName }
          if (-not $testAssemblies) {
            Write-Error "No test assemblies found matching the pattern '${{ inputs.test-assembly }}'."
            exit 1
          }

          # Debug: List resolved test assemblies
          Write-Host "Resolved test assemblies:"
          $testAssemblies | ForEach-Object { Write-Host $_ }

          # Run VSTest for each resolved test assembly
          foreach ($testAssembly in $testAssemblies) {
            $command = "vstest.console.exe `"$testAssembly`""
            Write-Host "Executing: $command"
            Invoke-Expression $command
          }
