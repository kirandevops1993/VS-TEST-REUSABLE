name: VS Test Reusable Workflow

on:
  workflow_call:
    inputs:
      vsTestVersion:
        required: true
        type: string
        default: "latest"
      testAssembly:
        required: true
        type: string
        default: "**/*Tests.dll"
      testFilterCriteria:
        required: false
        type: string
        default: ""
      runSettingsFile:
        required: false
        type: string
        default: ""
      codeCoverageEnabled:
        required: false
        type: boolean
        default: false
      pathToCustomTestAdapters:
        required: false
        type: string
        default: ""
      overrideTestRunParameters:
        required: false
        type: string
        default: ""
      otherConsoleOptions:
        required: false
        type: string
        default: ""
      testRunTitle:
        required: false
        type: string
        default: "Automated Test Run"
      platform:
        required: false
        type: string
        default: "x64"
      configuration:
        required: false
        type: string
        default: "Release"
      publishRunAttachments:
        required: false
        type: boolean
        default: true
      runInParallel:
        required: false
        type: boolean
        default: false
      vsTestLocationMethod:
        required: false
        type: string
        default: "auto"
      vsTestLocation:
        required: false
        type: string
        default: ""

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Locate VSTest Console from Visual Studio
        id: find_vstest
        run: |
          $possiblePaths = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\TestPlatform\vstest.console.exe",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\TestPlatform\vstest.console.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\TestPlatform\vstest.console.exe",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"
          )

          $vsTestPath = $possiblePaths | Where-Object { Test-Path $_ } | Select-Object -First 1

          if (-not $vsTestPath) {
            Write-Host "❌ vstest.console.exe not found!"
            exit 1
          }

          echo "VSTEST_CONSOLE=$vsTestPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "✅ Using VSTest: $vsTestPath"
        shell: pwsh

      - name: Find Test Assemblies
        id: find_tests
        run: |
          $testAssemblies = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse -Filter "*Tests.dll" | ForEach-Object { $_.FullName }
          
          if ($testAssemblies.Count -eq 0) {
            Write-Host "❌ No test assemblies found matching pattern '*Tests.dll'"
            exit 1
          }

          $testAssembliesString = $testAssemblies -join ' '
          echo "TEST_ASSEMBLIES=$testAssembliesString" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "✅ Found Test Assemblies: $testAssembliesString"
        shell: pwsh

      - name: Run Tests with VSTest
        run: |
          $testCommand = "`"$env:VSTEST_CONSOLE`" $env:TEST_ASSEMBLIES"

          if ("${{ inputs.testFilterCriteria }}" -ne "") {
            $testCommand += " /TestCaseFilter:${{ inputs.testFilterCriteria }}"
          }
          
          if ("${{ inputs.runSettingsFile }}" -ne "") {
            $testCommand += " /Settings:${{ inputs.runSettingsFile }}"
          }
          
          if (${{ inputs.codeCoverageEnabled }}) {
            $testCommand += " /EnableCodeCoverage"
          }
          
          if ("${{ inputs.pathToCustomTestAdapters }}" -ne "") {
            $testCommand += " /TestAdapterPath:${{ inputs.pathToCustomTestAdapters }}"
          }
          
          if ("${{ inputs.overrideTestRunParameters }}" -ne "") {
            $testCommand += " /TestRunParameters:${{ inputs.overrideTestRunParameters }}"
          }
          
          if ("${{ inputs.otherConsoleOptions }}" -ne "") {
            $testCommand += " ${{ inputs.otherConsoleOptions }}"
          }
          
          if (${{ inputs.publishRunAttachments }}) {
            $testCommand += " /EnableLog:${{ inputs.testRunTitle }}"
          }
          
          if (${{ inputs.runInParallel }}) {
            $testCommand += " /Parallel"
          }
          
          Write-Host "Running: $testCommand"
          Invoke-Expression $testCommand
        shell: pwsh
