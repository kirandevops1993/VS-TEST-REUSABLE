name: VS Build Reusable Workflow

on:
  workflow_call:
    inputs:
      vsTestVersion:
        required: true
        type: string
      testAssembly:
        required: true
        type: string
      testFilterCriteria:
        required: false
        type: string
      runSettingsFile:
        required: false
        type: string
      codeCoverageEnabled:
        required: false
        type: boolean
      pathToCustomTestAdapters:
        required: false
        type: string
      overrideTestRunParameters:
        required: false
        type: string
      publishRunAttachments:
        required: false
        type: boolean
      runInParallel:
        required: false
        type: boolean
      testRunTitle:
        required: false
        type: string
      platform:
        required: false
        type: string
      configuration:
        required: false
        type: string
      otherConsoleOptions:
        required: false
        type: string

jobs:
  run-tests:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find VSTest Console Path
        id: find_vstest
        run: |
          $vswherePath = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-Not (Test-Path $vswherePath)) {
            Write-Host "❌ vswhere.exe not found!"
            exit 1
          }
          $vsTestPath = & $vswherePath -latest -products * -requires Microsoft.VisualStudio.PackageGroup.TestTools.Core -find **\Common7\IDE\Extensions\TestPlatform\vstest.console.exe
          if (-Not $vsTestPath) {
            Write-Host "❌ vstest.console.exe not found!"
            exit 1
          }
          Write-Output "VSTEST_CONSOLE=$vsTestPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "✅ VSTest Console Path: $vsTestPath"
        shell: pwsh

      - name: Locate Test Assemblies
        id: find_tests
        run: |
          $testAssemblies = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse -Filter "${{ inputs.testAssembly }}" | ForEach-Object { $_.FullName }
          if (-not $testAssemblies) {
            Write-Host "❌ No test assemblies found matching pattern '${{ inputs.testAssembly }}'"
            exit 1
          }
          Write-Output "TEST_ASSEMBLIES=$($testAssemblies -join ';')" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Run Tests with VSTest
        run: |
          $testCommand = "`"$env:VSTEST_CONSOLE`" `"$env:TEST_ASSEMBLIES`""
          if ("${{ inputs.testFilterCriteria }}" -ne "") {
            $testCommand += " /TestCaseFilter:${{ inputs.testFilterCriteria }}"
          }
          if ("${{ inputs.runSettingsFile }}" -ne "") {
            $testCommand += " /Settings:${{ inputs.runSettingsFile }}"
          }
          if ("${{ inputs.codeCoverageEnabled }}" -eq "true") {
            $testCommand += " /EnableCodeCoverage"
          }
          if ("${{ inputs.publishRunAttachments }}" -eq "true") {
            $testCommand += " /PublishRunAttachments"
          }
          if ("${{ inputs.runInParallel }}" -eq "true") {
            $testCommand += " /Parallel"
          }
          if ("${{ inputs.platform }}" -ne "") {
            $testCommand += " /Platform:${{ inputs.platform }}"
          }
          if ("${{ inputs.configuration }}" -ne "") {
            $testCommand += " /Configuration:${{ inputs.configuration }}"
          }
          if ("${{ inputs.otherConsoleOptions }}" -ne "") {
            $testCommand += " ${{ inputs.otherConsoleOptions }}"
          }
          Write-Host "Running: $testCommand"
          Invoke-Expression $testCommand
        shell: pwsh
