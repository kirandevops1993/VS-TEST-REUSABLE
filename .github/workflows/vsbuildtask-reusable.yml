name: VS Test Reusable Workflow

on:
  workflow_call:
    inputs:
      vsTestVersion:
        required: true
        type: string
        default: "latest"
      testAssembly:
        required: true
        type: string
        default: "**/*Tests.dll"
      testFilterCriteria:
        required: false
        type: string
        default: ""
      runSettingsFile:
        required: false
        type: string
        default: ""
      codeCoverageEnabled:
        required: false
        type: boolean
        default: false
      pathToCustomTestAdapters:
        required: false
        type: string
        default: ""
      overrideTestRunParameters:
        required: false
        type: string
        default: ""
      otherConsoleOptions:
        required: false
        type: string
        default: ""
      testRunTitle:
        required: false
        type: string
        default: "Automated Test Run"
      platform:
        required: false
        type: string
        default: "x64"
      configuration:
        required: false
        type: string
        default: "Release"
      publishRunAttachments:
        required: false
        type: boolean
        default: true
      runInParallel:
        required: false
        type: boolean
        default: false
      vsTestLocationMethod:
        required: false
        type: string
        default: "auto"
      vsTestLocation:
        required: false
        type: string
        default: ""

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Visual Studio Test Platform
        run: |
          echo "Setting up Visual Studio Test Platform Version: ${{ inputs.vsTestVersion }}"
        shell: pwsh

      - name: Run Tests with VSTest
        run: |
          $testCommand = "vstest.console.exe `"$env:GITHUB_WORKSPACE\${{ inputs.testAssembly }}`""
          
          if ("${{ inputs.testFilterCriteria }}" -ne "") {
            $testCommand += " /TestCaseFilter:${{ inputs.testFilterCriteria }}"
          }
          
          if ("${{ inputs.runSettingsFile }}" -ne "") {
            $testCommand += " /Settings:${{ inputs.runSettingsFile }}"
          }
          
          if (${{ inputs.codeCoverageEnabled }}) {
            $testCommand += " /EnableCodeCoverage"
          }
          
          if ("${{ inputs.pathToCustomTestAdapters }}" -ne "") {
            $testCommand += " /TestAdapterPath:${{ inputs.pathToCustomTestAdapters }}"
          }
          
          if ("${{ inputs.overrideTestRunParameters }}" -ne "") {
            $testCommand += " /TestRunParameters:${{ inputs.overrideTestRunParameters }}"
          }
          
          if ("${{ inputs.otherConsoleOptions }}" -ne "") {
            $testCommand += " ${{ inputs.otherConsoleOptions }}"
          }
          
          if (${{ inputs.publishRunAttachments }}) {
            $testCommand += " /EnableLog:${{ inputs.testRunTitle }}"
          }
          
          if (${{ inputs.runInParallel }}) {
            $testCommand += " /Parallel"
          }
          
          echo "Running: $testCommand"
          Invoke-Expression $testCommand
        shell: pwsh
